//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/My Assets/Scripts/Player Input/Player Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input"",
    ""maps"": [
        {
            ""name"": ""Main actions"",
            ""id"": ""3f7e3559-8bfa-4803-81e3-72267ef59447"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""670854d2-0758-42c6-be57-e1076d29f22a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3a748920-9606-4adb-9205-b20b8772f417"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main actions
        m_Mainactions = asset.FindActionMap("Main actions", throwIfNotFound: true);
        m_Mainactions_Movement = m_Mainactions.FindAction("Movement", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_Mainactions.enabled, "This will cause a leak and performance issues, PlayerInput.Mainactions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main actions
    private readonly InputActionMap m_Mainactions;
    private List<IMainactionsActions> m_MainactionsActionsCallbackInterfaces = new List<IMainactionsActions>();
    private readonly InputAction m_Mainactions_Movement;
    public struct MainactionsActions
    {
        private @PlayerInput m_Wrapper;
        public MainactionsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Mainactions_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Mainactions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainactionsActions set) { return set.Get(); }
        public void AddCallbacks(IMainactionsActions instance)
        {
            if (instance == null || m_Wrapper.m_MainactionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainactionsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IMainactionsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IMainactionsActions instance)
        {
            if (m_Wrapper.m_MainactionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainactionsActions instance)
        {
            foreach (var item in m_Wrapper.m_MainactionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainactionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainactionsActions @Mainactions => new MainactionsActions(this);
    public interface IMainactionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
